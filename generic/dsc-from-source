#!/usr/bin/env bash
set -Eeuo pipefail
trap 'echo >&2 "$BASH_SOURCE: line $LINENO: unexpected exit $?"' ERR

shopt -s dotglob

# usage: $0 target-dir/ foo/ [bar/ [baz/ ...]]
self="$(basename "$0")"
usage() {
	echo "usage: $self target-dir/ foo/ [bar/ [baz/ ...]]"
	echo "   eg: $self my-output-dir/ moby-runc/ moby-containerd/"
}
fatal_usage() {
	if [ "$#" -gt 0 ]; then
		echo >&2 "error: $*"
		echo >&2
	fi
	usage >&2
	exit 1
}
[ "$#" -ge 2 ] || fatal_usage "expected at least 2 arguments (got $#)"

targetDir="$1"; shift
mkdir -p "$targetDir"

dir="$(mktemp -d -t "$self.XXXXXX")"
exitTrap="$(printf 'rm -rf %q' "$dir")"
trap "$exitTrap" EXIT
workdir="$dir/workdir"

# https://salsa.debian.org/debian/devscripts/-/blob/664e4eb0c015c01486b8d1079fb9a65a29e69bce/conf.default.in#L34-37
export DEVSCRIPTS_CHECK_DIRNAME_LEVEL=0
# (because we copy into a directory called "src" this will always fail)

for sourceDir; do
	[ -f "$sourceDir/debian/changelog" ]

	mkdir "$workdir"
	cp -aT "$sourceDir" "$workdir/src"

	changelog="$workdir/src/debian/changelog"
	pkg="$(dpkg-parsechangelog -l"$changelog" -SSource)"
	ver="$(dpkg-parsechangelog -l"$changelog" -SVersion)"
	origVer="${ver%-*}" # strip everything from the last dash
	if [ "$ver" = "$origVer" ]; then
		# if "$ver" = "$origVer" here, we're a "native" package and thus have no orig tarball
		isNative=1
	else
		origVer="$(sed -r 's/^[0-9]+://' <<<"$origVer")" # strip epoch
		isNative=
	fi

	needOrig=1
	if [ -z "$isNative" ]; then
		origPrefix="${pkg}_${origVer}.orig"
		for f in "$sourceDir/../tarballs/$origPrefix"* "$sourceDir/../$origPrefix"*; do
			base="$(basename "$f")"
			if [ -f "$f" ] && [ ! -f "$workdir/$base" ]; then
				cp -aT "$f" "$workdir/$base"
				needOrig=
			fi
		done
	fi
	if [ -n "$needOrig" ]; then
		uscan \
			--destdir "$workdir" \
			--download-current-version \
			--rename \
			"$workdir/src"
	fi

	if [ -z "$isNative" ]; then
		extract-origtargz \
			--dest "$workdir/src" \
			--tarballs "$workdir"
	fi

	args=(
		--build=source
		--no-pre-clean
		--no-sign
		-sa
	)
	(
		cd "$workdir/src"
		env -i PATH="$PATH" dpkg-buildpackage "${args[@]}"
	)

	dput-local "$targetDir" "$workdir"/*.changes

	rm -rf "$workdir"
done
