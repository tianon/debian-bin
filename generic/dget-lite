#!/usr/bin/env bash
set -Eeuo pipefail

shopt -s dotglob

self="$(basename "$0")"
usage() {
	echo "usage: $self target-dir/ foo.dsc [foo-validate-bash]"
	echo "   eg: $self my-output-dir/ https://example.com/foo.dsc \"sha256sum --strict --check <<<'deadbeefcafe *foo.dsc'\""
}
fatal_usage() {
	if [ "$#" -gt 0 ]; then
		echo >&2 "error: $*"
		echo >&2
	fi
	usage >&2
	exit 1
}
[ "$#" -ge 2 ] || fatal_usage "expected at least 2 arguments (got $#)"

targetDirectory="$1"; shift
mkdir -p "$targetDirectory"
targetDirectory="$(readlink -ev "$targetDirectory")"

dsc="$1"; shift # can also take a .changes file ðŸ‘€ (and either local path *or* remote)
dscValidate="${1:-}" # (optional) bit of bash code to validate the dsc file after downloading it (before downloading more files from it); ideally from "dsc-extract-checksums" -> "bashValidate"

dir="$(mktemp -d -t "$self.XXXXXX")"
exitTrap="$(printf 'rm -rf %q' "$dir")"
trap "$exitTrap" EXIT
workdir="$dir/workdir"
mkdir "$workdir"

remote=
if grep -qE '^https?://' <<<"$dsc"; then
	remote=1
else
	dsc="$(readlink -ev "$dsc")"
	dsc-validate-checksums "$dsc"
fi

dscBase="$(basename "$dsc")"
dscDir="$(dirname "$dsc")"

files=()
_get() {
	local f="$1"; shift
	local validate="${1:-}"

	if [ -n "$remote" ]; then
		wget --no-verbose --output-document="$workdir/$f" "$dscDir/$f" || return 1
	else
		cp --dereference --target-directory="$workdir" "$dscDir/$f" || return 1
	fi

	if [ -n "$validate" ]; then
		(
			set -Eeuo pipefail
			cd "$workdir"
			eval "$validate"
		) || return 1
	fi

	[ -e "$workdir/$f" ] || return 1
	files+=( "$workdir/$f" )
}

_get "$dscBase" "$dscValidate"

shell="$(dsc-extract-checksums "$workdir/$dscBase" | jq -r 'to_entries[] | "_get " + (.key | @sh) + " " + (.value.bashValidate | @sh)')"
eval "$shell"

cp --verbose --target-directory="$targetDirectory" "${files[@]}"
