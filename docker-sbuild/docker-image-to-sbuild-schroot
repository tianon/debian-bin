#!/usr/bin/env bash
set -Eeuo pipefail
trap 'echo >&2 "$BASH_SOURCE: line $LINENO: unexpected exit $?"' ERR

# usage: ... <tar> <image>

if ! opts="$(getopt --name "$0" --options '+' --longoptions 'platform:,pull' -- "$@")"; then
	# TODO usage
	exit 1
fi
eval "set -- $opts"

buildArgs=()
while [ "$#" -gt 0 ]; do
	flag="$1"; shift
	case "$flag" in
		--platform) buildArgs+=( "$flag" "$1" ); shift ;;
		--pull) buildArgs+=( "$flag" ) ;;
		--) break ;;
		*) echo >&2 "error: unknown flag '$flag'"; exit 1 ;;
	esac
done

tar="$1"; shift # TODO || usage
from="$1"; shift # TODO || usage

onExit=
defer() {
	local newExit; newExit="$(printf "$@")"
	onExit="$newExit${onExit:+; $onExit}"
	trap "$onExit" EXIT
}

dir="$(mktemp -d -t docker-sbuild.XXXXXX)"
defer 'rm -rf %q' "$dir"

cat > "$dir/Dockerfile" <<-EOF
	FROM $from
	# this should match the package list added to the "buildd" variant in debootstrap and the list installed by sbuild
	# https://salsa.debian.org/installer-team/debootstrap/blob/da5f17904de373cd7a9224ad7cd69c80b3e7e234/scripts/debian-common#L20
	# https://salsa.debian.org/debian/sbuild/blob/fc306f4be0d2c57702c5e234273cd94b1dba094d/bin/sbuild-createchroot#L257-260
	# (we also include "eatmydata" because it's useful for making builds faster)
	RUN set -eux; \
		apt-get update; \
		apt-get dist-upgrade -y; \
		apt-get install -y --no-install-recommends \
			build-essential \
			fakeroot \
			eatmydata \
		; \
		rm -rf /var/lib/apt/lists/*
	COPY .tar-excludes /
EOF
cat > "$dir/.tar-excludes" <<-'EOF'
	./.docker*
	./.tar-excludes
	./etc/hostname
	./etc/hosts
	./etc/resolv.conf
	./proc/**
	./sys/**
EOF
docker build "${buildArgs[@]}" --iidfile "$dir/image.txt" "$dir"
img="$(< "$dir/image.txt")"
#defer 'docker rmi %q > /dev/null' "$img"

ctr="$(docker create --entrypoint bogus "$img")"
defer 'docker rm -vf %q > /dev/null' "$ctr"

# since we already assumed the current Docker host can successfully run the image's binaries, we'll use that here
timestamp="$(docker image inspect --format='{{ .Created }}' "$img")"
docker run --rm --log-driver none --entrypoint bash --env timestamp="$timestamp" "$img" -Eeuo pipefail -c 'tar --create --directory=/ --one-file-system --exclude-from=/.tar-excludes --clamp-mtime --mtime="$timestamp" . ./dev' > "$tar"
tar --list --file "$tar" > /dev/null # very crude "is this tar OK" test

printf '%q created (FROM %q)\n' "$tar" "$from"
